<?xml version="1.0"?>
<project name="trove-scala">
    <macrodef name="render">
        <attribute name="src"/>
        <attribute name="type"/>
        <attribute name="dst"/>
        <attribute name="dir" default="main"/>
        <element name="render" optional="yes"/>
        <sequential>
            <copy file="src/main/resources/@{src}" tofile="src/@{dir}/scala/@{dst}">
                <filterchain>
                    <replacetokens>
                        <token key="type" value="@{type}"/>
                        <token key="header" value="// AUTOMATICALLY GENERATED FILE!!! DO NOT EDIT!!!"/>
                    </replacetokens>
                </filterchain>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="render-iterator">
        <attribute name="type"/>
        <sequential>
            <render src="com/codahale/trove/collection/PrimitiveIterator.scala.tpl"
                    dst="com/codahale/trove/collection/@{type}Iterator.scala"
                    type="@{type}"/>
        </sequential>
    </macrodef>

    <macrodef name="render-map-iterator">
        <attribute name="keyType"/>
        <attribute name="valueType"/>
        <sequential>
            <copy file="src/main/resources/com/codahale/trove/collection/PrimitiveMapIterator.scala.tpl"
                  tofile="src/main/scala/com/codahale/trove/collection/@{keyType}@{valueType}Iterator.scala">
                <filterchain>
                    <replacetokens>
                        <token key="keyType" value="@{keyType}"/>
                        <token key="valueType" value="@{valueType}"/>
                        <token key="header"
                               value="// AUTOMATICALLY GENERATED FILE!!! DO NOT EDIT!!!"/>
                    </replacetokens>
                </filterchain>
            </copy>
        </sequential>
    </macrodef>

    <target name="render-iterators">
        <parallel>
            <render-iterator type="Byte"/>
            <render-iterator type="Char"/>
            <render-iterator type="Double"/>
            <render-iterator type="Float"/>
            <render-iterator type="Int"/>
            <render-iterator type="Long"/>
            <render-map-iterator keyType="Byte" valueType="Byte"/>
            <render-map-iterator keyType="Byte" valueType="Char"/>
            <render-map-iterator keyType="Byte" valueType="Double"/>
            <render-map-iterator keyType="Byte" valueType="Float"/>
            <render-map-iterator keyType="Byte" valueType="Int"/>
            <render-map-iterator keyType="Byte" valueType="Long"/>
            <render-map-iterator keyType="Char" valueType="Byte"/>
            <render-map-iterator keyType="Char" valueType="Char"/>
            <render-map-iterator keyType="Char" valueType="Double"/>
            <render-map-iterator keyType="Char" valueType="Float"/>
            <render-map-iterator keyType="Char" valueType="Int"/>
            <render-map-iterator keyType="Char" valueType="Long"/>
            <render-map-iterator keyType="Double" valueType="Byte"/>
            <render-map-iterator keyType="Double" valueType="Char"/>
            <render-map-iterator keyType="Double" valueType="Double"/>
            <render-map-iterator keyType="Double" valueType="Float"/>
            <render-map-iterator keyType="Double" valueType="Int"/>
            <render-map-iterator keyType="Double" valueType="Long"/>
            <render-map-iterator keyType="Float" valueType="Byte"/>
            <render-map-iterator keyType="Float" valueType="Char"/>
            <render-map-iterator keyType="Float" valueType="Double"/>
            <render-map-iterator keyType="Float" valueType="Float"/>
            <render-map-iterator keyType="Float" valueType="Int"/>
            <render-map-iterator keyType="Float" valueType="Long"/>
            <render-map-iterator keyType="Int" valueType="Byte"/>
            <render-map-iterator keyType="Int" valueType="Char"/>
            <render-map-iterator keyType="Int" valueType="Double"/>
            <render-map-iterator keyType="Int" valueType="Float"/>
            <render-map-iterator keyType="Int" valueType="Int"/>
            <render-map-iterator keyType="Int" valueType="Long"/>
            <render-map-iterator keyType="Long" valueType="Byte"/>
            <render-map-iterator keyType="Long" valueType="Char"/>
            <render-map-iterator keyType="Long" valueType="Double"/>
            <render-map-iterator keyType="Long" valueType="Float"/>
            <render-map-iterator keyType="Long" valueType="Int"/>
            <render-map-iterator keyType="Long" valueType="Long"/>
        </parallel>
    </target>

    <macrodef name="render-set">
        <attribute name="type"/>
        <sequential>
            <render src="com/codahale/trove/collection/PrimitiveSet.scala.tpl"
                    dst="com/codahale/trove/collection/@{type}Set.scala"
                    type="@{type}"/>
            <render src="com/codahale/trove/collection/PrimitiveSetLike.scala.tpl"
                    dst="com/codahale/trove/collection/@{type}SetLike.scala"
                    type="@{type}"/>
            <render src="com/codahale/trove/generic/PrimitiveSetFactory.scala.tpl"
                    dst="com/codahale/trove/generic/@{type}SetFactory.scala"
                    type="@{type}"/>
            <render src="com/codahale/trove/immutable/PrimitiveSet.scala.tpl"
                    dst="com/codahale/trove/immutable/@{type}Set.scala"
                    type="@{type}"/>
            <render src="com/codahale/trove/mutable/PrimitiveSet.scala.tpl"
                    dst="com/codahale/trove/mutable/@{type}Set.scala"
                    type="@{type}"/>
        </sequential>
    </macrodef>

    <target name="render-sets">
        <parallel>
            <render-set type="Byte"/>
            <render-set type="Char"/>
            <render-set type="Double"/>
            <render-set type="Float"/>
            <render-set type="Int"/>
            <render-set type="Long"/>
        </parallel>
    </target>

    <macrodef name="render-seq">
        <attribute name="type"/>
        <sequential>
            <render src="com/codahale/trove/mutable/PrimitiveBuffer.scala.tpl"
                    dst="com/codahale/trove/mutable/@{type}Buffer.scala"
                    type="@{type}"/>
        </sequential>
    </macrodef>

    <target name="render-seqs">
        <parallel>
            <render-seq type="Byte"/>
            <render-seq type="Char"/>
            <render-seq type="Double"/>
            <render-seq type="Float"/>
            <render-seq type="Int"/>
            <render-seq type="Long"/>
        </parallel>
    </target>

    <macrodef name="render-map">
        <attribute name="keyType"/>
        <attribute name="valueType"/>
        <sequential>
            <copy file="src/main/resources/com/codahale/trove/mutable/PrimitiveMap.scala.tpl"
                  tofile="src/main/scala/com/codahale/trove/mutable/@{keyType}@{valueType}Map.scala">
                <filterchain>
                    <replacetokens>
                        <token key="keyType" value="@{keyType}"/>
                        <token key="valueType" value="@{valueType}"/>
                        <token key="header"
                               value="// AUTOMATICALLY GENERATED FILE!!! DO NOT EDIT!!!"/>
                    </replacetokens>
                </filterchain>
            </copy>
        </sequential>
    </macrodef>

    <target name="render-maps">
        <parallel>
            <render-map keyType="Byte" valueType="Byte"/>
            <render-map keyType="Byte" valueType="Char"/>
            <render-map keyType="Byte" valueType="Double"/>
            <render-map keyType="Byte" valueType="Float"/>
            <render-map keyType="Byte" valueType="Int"/>
            <render-map keyType="Byte" valueType="Long"/>
            <render-map keyType="Char" valueType="Byte"/>
            <render-map keyType="Char" valueType="Char"/>
            <render-map keyType="Char" valueType="Double"/>
            <render-map keyType="Char" valueType="Float"/>
            <render-map keyType="Char" valueType="Int"/>
            <render-map keyType="Char" valueType="Long"/>
            <render-map keyType="Double" valueType="Byte"/>
            <render-map keyType="Double" valueType="Char"/>
            <render-map keyType="Double" valueType="Double"/>
            <render-map keyType="Double" valueType="Float"/>
            <render-map keyType="Double" valueType="Int"/>
            <render-map keyType="Double" valueType="Long"/>
            <render-map keyType="Float" valueType="Byte"/>
            <render-map keyType="Float" valueType="Char"/>
            <render-map keyType="Float" valueType="Double"/>
            <render-map keyType="Float" valueType="Float"/>
            <render-map keyType="Float" valueType="Int"/>
            <render-map keyType="Float" valueType="Long"/>
            <render-map keyType="Int" valueType="Byte"/>
            <render-map keyType="Int" valueType="Char"/>
            <render-map keyType="Int" valueType="Double"/>
            <render-map keyType="Int" valueType="Float"/>
            <render-map keyType="Int" valueType="Int"/>
            <render-map keyType="Int" valueType="Long"/>
            <render-map keyType="Long" valueType="Byte"/>
            <render-map keyType="Long" valueType="Char"/>
            <render-map keyType="Long" valueType="Double"/>
            <render-map keyType="Long" valueType="Float"/>
            <render-map keyType="Long" valueType="Int"/>
        </parallel>
    </target>

    <target name="generate-sources" depends="render-iterators,render-sets,render-seqs,render-maps" />

    <target name="clean">
        <delete>
            <fileset dir="src/main/scala" includes="**/*Iterator.scala"/>
            <fileset dir="src/main/scala" includes="**/*Set*.scala"/>
            <fileset dir="src/main/scala" includes="**/*Buffer*.scala"/>
        </delete>
    </target>
</project>
